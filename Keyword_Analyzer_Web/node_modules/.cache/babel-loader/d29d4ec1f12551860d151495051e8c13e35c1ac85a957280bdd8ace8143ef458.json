{"ast":null,"code":"import Papa from'papaparse';export class CsvProcessor{/**\n   * CSV dosyasından sütun bilgilerini analiz et\n   */static analyzeColumns(data){if(data.length===0)return[];const columns=Object.keys(data[0]);const columnInfo=[];columns.forEach(columnName=>{const values=data.map(row=>row[columnName]);const nonNullValues=values.filter(val=>val!==null&&val!==undefined&&val!=='');// Veri tipini belirle\nconst type=this.determineColumnType(values);// Boolean değerleri kontrol et\nconst booleanValues=type==='boolean'?Array.from(new Set(values.filter(val=>val===true||val===false))):undefined;// Sayısal değerler için min/max hesapla\nlet min;let max;if(type==='number'||type==='percentage'){const numericValues=nonNullValues.map(val=>this.convertToNumber(val));const validNumericValues=numericValues.filter(val=>!isNaN(val)&&isFinite(val));if(validNumericValues.length>0){min=Math.min(...validNumericValues);max=Math.max(...validNumericValues);}}// Benzersiz değerleri al (string sütunlar için)\nconst uniqueValues=type==='string'?Array.from(new Set(nonNullValues)):undefined;columnInfo.push({name:columnName,type,min,max,hasNulls:values.length!==nonNullValues.length,uniqueValues,booleanValues});});return columnInfo;}/**\n   * Sütun tipini belirle\n   */static determineColumnType(values){const nonNullValues=values.filter(val=>val!==null&&val!==undefined&&val!=='');if(nonNullValues.length===0)return'string';// Boolean kontrolü\nconst booleanCount=nonNullValues.filter(val=>val===true||val===false||val==='true'||val==='false'||val==='True'||val==='False').length;if(booleanCount===nonNullValues.length)return'boolean';// Yüzde kontrolü\nconst percentageCount=nonNullValues.filter(val=>typeof val==='string'&&val.includes('%')).length;if(percentageCount>0)return'percentage';// Sayı kontrolü\nconst numericCount=nonNullValues.filter(val=>{if(typeof val==='number')return!isNaN(val);if(typeof val==='string'){const cleaned=val.replace(/,/g,'').replace(/%/g,'').replace(/\\s/g,'').trim();return!isNaN(parseFloat(cleaned))&&cleaned!=='';}return false;}).length;if(numericCount===nonNullValues.length)return'number';// Tarih kontrolü (basit)\nconst dateCount=nonNullValues.filter(val=>{if(typeof val==='string'){// Basit tarih formatları kontrolü\nconst datePatterns=[/^\\d{4}-\\d{2}-\\d{2}$/,// YYYY-MM-DD\n/^\\d{2}\\/\\d{2}\\/\\d{4}$/,// MM/DD/YYYY\n/^\\d{2}-\\d{2}-\\d{4}$/// MM-DD-YYYY\n];return datePatterns.some(pattern=>pattern.test(val));}return false;}).length;if(dateCount>nonNullValues.length*0.8)return'date';return'string';}/**\n   * Veriyi dinamik olarak işle\n   */static processDataDynamically(data,columnInfo){let nullHandling=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'zero';return data.map(row=>{const processedRow={};columnInfo.forEach(column=>{const value=row[column.name];switch(column.type){case'number':processedRow[column.name]=this.convertToNumber(value);break;case'percentage':processedRow[column.name]=this.convertPercentageToNumber(value);break;case'boolean':processedRow[column.name]=this.convertToBoolean(value);break;case'date':processedRow[column.name]=this.convertToDate(value);break;default:processedRow[column.name]=value;}// Null değerleri işle\nif(processedRow[column.name]===null||processedRow[column.name]===undefined){switch(nullHandling){case'zero':processedRow[column.name]=column.type==='string'?'':0;break;case'null':processedRow[column.name]=null;break;case'exclude':// Bu satırı filtreleme sırasında çıkaracağız\nbreak;}}});return processedRow;});}/**\n   * Yüzde değerini sayıya çevir\n   */static convertPercentageToNumber(value){if(value===null||value===undefined||value===''){return 0;}try{if(typeof value==='number'){return isNaN(value)?0:value;}if(typeof value==='string'){const cleaned=value.replace(/,/g,'').replace(/\\s/g,'').trim();if(cleaned===''||cleaned==='-'){return 0;}// Yüzde işaretini kaldır ve parse et\nconst withoutPercent=cleaned.replace(/%/g,'');const parsed=parseFloat(withoutPercent);return isNaN(parsed)?0:parsed;}return 0;}catch{return 0;}}/**\n   * Boolean değere çevir\n   */static convertToBoolean(value){if(value===null||value===undefined||value===''){return null;}if(typeof value==='boolean'){return value;}if(typeof value==='string'){const lower=value.toLowerCase().trim();if(lower==='true'||lower==='1'||lower==='yes'){return true;}if(lower==='false'||lower==='0'||lower==='no'){return false;}}if(typeof value==='number'){return value===1;}return null;}/**\n   * Tarih değerine çevir\n   */static convertToDate(value){if(value===null||value===undefined||value===''){return null;}if(typeof value==='string'){// Basit tarih formatı kontrolü\nconst datePatterns=[/^\\d{4}-\\d{2}-\\d{2}$/,// YYYY-MM-DD\n/^\\d{2}\\/\\d{2}\\/\\d{4}$/,// MM/DD/YYYY\n/^\\d{2}-\\d{2}-\\d{4}$/// MM-DD-YYYY\n];if(datePatterns.some(pattern=>pattern.test(value))){return value;}}return value;}/**\n   * Tek klasördeki tüm CSV dosyalarını birleştirir\n   */static async mergeNoDuplicateData(files){const allData=[];let allColumnInfo=[];for(const file of files){try{const rawData=await this.parseCsvFile(file);// İlk dosyadan sütun bilgilerini al\nif(allColumnInfo.length===0){allColumnInfo=this.analyzeColumns(rawData);}// Veriyi dinamik olarak işle\nconst processedData=this.processDataDynamically(rawData,allColumnInfo);// Kategori bilgisini ekle\nconst dataWithCategory=processedData.map(row=>({...row,Category:this.extractCategoryFromFileName(file.name)}));allData.push(...dataWithCategory);}catch(error){console.error(`Error processing file ${file.name}:`,error);}}return{data:allData.sort((a,b)=>(b.Difficulty||0)-(a.Difficulty||0)),columnInfo:allColumnInfo};}/**\n   * Tarih modu için çoklu klasör işleme\n   */static async mergeWithDateData(folders){const allData=[];let allColumnInfo=[];for(const folder of folders){var _folder$,_folder$$webkitRelati;const folderName=((_folder$=folder[0])===null||_folder$===void 0?void 0:(_folder$$webkitRelati=_folder$.webkitRelativePath)===null||_folder$$webkitRelati===void 0?void 0:_folder$$webkitRelati.split('/')[0])||'unknown';const dateInfo=folderName.split('_')[0];for(const file of folder){try{const rawData=await this.parseCsvFile(file);// İlk dosyadan sütun bilgilerini al\nif(allColumnInfo.length===0){allColumnInfo=this.analyzeColumns(rawData);}// Veriyi dinamik olarak işle\nconst processedData=this.processDataDynamically(rawData,allColumnInfo);const dataWithCategory=processedData.map(row=>({...row,Category:this.extractCategoryFromFileName(file.name),Date:dateInfo}));allData.push(...dataWithCategory);}catch(error){console.error(`Error processing file ${file.name}:`,error);}}}return{data:allData.sort((a,b)=>(b.Difficulty||0)-(a.Difficulty||0)),columnInfo:allColumnInfo};}/**\n   * Tek CSV dosyası işleme\n   */static async processSingleCsvFile(file){try{const rawData=await this.parseCsvFile(file);const columnInfo=this.analyzeColumns(rawData);const processedData=this.processDataDynamically(rawData,columnInfo);const dataWithCategory=processedData.map(row=>({...row,Category:this.extractCategoryFromFileName(file.name)}));return{data:dataWithCategory.sort((a,b)=>(b.Difficulty||0)-(a.Difficulty||0)),columnInfo};}catch(error){console.error(`Error processing single file ${file.name}:`,error);throw error;}}/**\n   * KVD (Keyword, Volume, Difficulty) filtresi\n   */static filterKVD(data,limit){return data.filter(row=>(row.Volume||0)>=20&&(row.Difficulty||0)<=limit).sort((a,b)=>(b.Volume||0)-(a.Volume||0));}/**\n   * Kelime frekans analizi\n   */static getWordFrequency(data){const words=data.map(row=>row.Keyword).join(' ').split(/\\s+/).filter(word=>word.length>0);const frequencyMap=new Map();words.forEach(word=>{const normalized=word.toLowerCase();frequencyMap.set(normalized,(frequencyMap.get(normalized)||0)+1);});const result=Array.from(frequencyMap.entries()).map(_ref=>{var _data$;let[word,frequency]=_ref;return{word,frequency,category:((_data$=data[0])===null||_data$===void 0?void 0:_data$.Category)||'Frequency'};}).sort((a,b)=>b.frequency-a.frequency);return result;}/**\n   * Branded kelimeleri filtrele\n   */static filterBrandedWords(frequencyData){const stopWords=['free','new','best','top','iphone','ipad','android','google','store','download','downloads','for','apple','with','yours','a','about','above','after','again','against','all','am','an','and','any','app','are','aren\\'t','as','at','be','because','been','before','being','below','between','both','but','by','can\\'t','cannot','could','couldn\\'t','did','didn\\'t','do','does','doesn\\'t','doing','don\\'t','down','during','each','few','from','further','had','hadn\\'t','has','hasn\\'t','have','haven\\'t','having','he','he\\'d','he\\'ll','he\\'s','her','here','here\\'s','hers','herself','him','himself','his','how','how\\'s','i','i\\'d','i\\'ll','i\\'m','i\\'ve','if','in','into','is','isn\\'t','it','it\\'s','its','itself','let\\'s','me','more','most','mustn\\'t','my','myself','no','nor','not','of','off','on','once','only','or','other','ought','our','ours','ourselves','out','over','own','same','shan\\'t','she','she\\'d','she\\'ll','she\\'s','should','shouldn\\'t','so','some','such','than','that','that\\'s','the','their','theirs','them','themselves','then','there','there\\'s','these','they','they\\'d','they\\'ll','they\\'re','they\\'ve','this','those','through','to','too','under','until','up','very','was','wasn\\'t','we','we\\'d','we\\'ll','we\\'re','we\\'ve','were','weren\\'t','what','what\\'s','when','when\\'s','where','where\\'s','which','while','who','who\\'s','whom','why','why\\'s','won\\'t','would','wouldn\\'t','you','you\\'d','you\\'ll','you\\'re','you\\'ve','your','yours','yourself','yourselves'];return frequencyData.filter(item=>{const word=item.word.toLowerCase();return!stopWords.includes(word);});}/**\n   * Çoğul eklerini kaldır\n   */static removeSuffixes(frequencyData){return frequencyData.map(item=>{let word=item.word.toLowerCase();// Basit çoğul ek kaldırma kuralları\nif(word.endsWith('ies')){word=word.slice(0,-3)+'y';}else if(word.endsWith('es')){word=word.slice(0,-2);}else if(word.endsWith('s')){word=word.slice(0,-1);}return{...item,word};});}/**\n   * CSV dosyasını parse et\n   */static async parseCsvFile(file){return new Promise((resolve,reject)=>{Papa.parse(file,{header:true,skipEmptyLines:true,complete:results=>{if(results.errors.length>0){reject(new Error(`CSV parsing errors: ${results.errors.map(e=>e.message).join(', ')}`));}else{resolve(results.data);}},error:error=>{reject(error);}});});}/**\n   * Herhangi bir değeri güvenli şekilde number'a çevir\n   */static convertToNumber(value){if(value===null||value===undefined||value===''){return 0;}try{// String ise temizle\nif(typeof value==='string'){const cleaned=value.replace(/,/g,'').replace(/%/g,'').replace(/\\s/g,'').trim();if(cleaned===''||cleaned==='-'){return 0;}const parsed=parseFloat(cleaned);return isNaN(parsed)?0:parsed;}// Number ise direkt döndür\nif(typeof value==='number'){return isNaN(value)?0:value;}// Diğer tipler için string'e çevir ve parse et\nconst stringValue=String(value);const cleaned=stringValue.replace(/,/g,'').replace(/%/g,'').replace(/\\s/g,'').trim();const parsed=parseFloat(cleaned);return isNaN(parsed)?0:parsed;}catch{return 0;}}/**\n   * Growth değerini integer'a çevir (geriye uyumluluk için)\n   */static convertGrowthToInt(growth){return this.convertToNumber(growth);}/**\n   * Dosya adından kategori çıkar\n   */static extractCategoryFromFileName(fileName){const nameWithoutExt=fileName.replace('.csv','');const parts=nameWithoutExt.split('-');if(parts.length>=4&&parts[0]==='trending'&&parts[1]==='keywords'){return parts.slice(3).join('-');}else{return parts[parts.length-1]||nameWithoutExt;}}}","map":{"version":3,"names":["Papa","CsvProcessor","analyzeColumns","data","length","columns","Object","keys","columnInfo","forEach","columnName","values","map","row","nonNullValues","filter","val","undefined","type","determineColumnType","booleanValues","Array","from","Set","min","max","numericValues","convertToNumber","validNumericValues","isNaN","isFinite","Math","uniqueValues","push","name","hasNulls","booleanCount","percentageCount","includes","numericCount","cleaned","replace","trim","parseFloat","dateCount","datePatterns","some","pattern","test","processDataDynamically","nullHandling","arguments","processedRow","column","value","convertPercentageToNumber","convertToBoolean","convertToDate","withoutPercent","parsed","lower","toLowerCase","mergeNoDuplicateData","files","allData","allColumnInfo","file","rawData","parseCsvFile","processedData","dataWithCategory","Category","extractCategoryFromFileName","error","console","sort","a","b","Difficulty","mergeWithDateData","folders","folder","_folder$","_folder$$webkitRelati","folderName","webkitRelativePath","split","dateInfo","Date","processSingleCsvFile","filterKVD","limit","Volume","getWordFrequency","words","Keyword","join","word","frequencyMap","Map","normalized","set","get","result","entries","_ref","_data$","frequency","category","filterBrandedWords","frequencyData","stopWords","item","removeSuffixes","endsWith","slice","Promise","resolve","reject","parse","header","skipEmptyLines","complete","results","errors","Error","e","message","stringValue","String","convertGrowthToInt","growth","fileName","nameWithoutExt","parts"],"sources":["/Users/aibatyr/Documents/GitHub/KeyWords_Analyzer_Web/Keyword_Analyzer_Web/src/utils/csvProcessor.ts"],"sourcesContent":["import Papa from 'papaparse';\nimport { KeywordData, ColumnInfo } from '../types';\n\nexport class CsvProcessor {\n  /**\n   * CSV dosyasından sütun bilgilerini analiz et\n   */\n  static analyzeColumns(data: any[]): ColumnInfo[] {\n    if (data.length === 0) return [];\n\n    const columns = Object.keys(data[0]);\n    const columnInfo: ColumnInfo[] = [];\n\n    columns.forEach(columnName => {\n      const values = data.map(row => row[columnName]);\n      const nonNullValues = values.filter(val => val !== null && val !== undefined && val !== '');\n      \n      // Veri tipini belirle\n      const type = this.determineColumnType(values);\n      \n      // Boolean değerleri kontrol et\n      const booleanValues = type === 'boolean' ? \n        Array.from(new Set(values.filter(val => val === true || val === false))) as boolean[] : \n        undefined;\n\n      // Sayısal değerler için min/max hesapla\n      let min: number | undefined;\n      let max: number | undefined;\n      \n      if (type === 'number' || type === 'percentage') {\n        const numericValues = nonNullValues.map(val => this.convertToNumber(val));\n        const validNumericValues = numericValues.filter(val => !isNaN(val) && isFinite(val));\n        \n        if (validNumericValues.length > 0) {\n          min = Math.min(...validNumericValues);\n          max = Math.max(...validNumericValues);\n        }\n      }\n\n      // Benzersiz değerleri al (string sütunlar için)\n      const uniqueValues = type === 'string' ? \n        Array.from(new Set(nonNullValues)) : \n        undefined;\n\n      columnInfo.push({\n        name: columnName,\n        type,\n        min,\n        max,\n        hasNulls: values.length !== nonNullValues.length,\n        uniqueValues,\n        booleanValues\n      });\n    });\n\n    return columnInfo;\n  }\n\n  /**\n   * Sütun tipini belirle\n   */\n  private static determineColumnType(values: any[]): 'string' | 'number' | 'boolean' | 'percentage' | 'date' {\n    const nonNullValues = values.filter(val => val !== null && val !== undefined && val !== '');\n    \n    if (nonNullValues.length === 0) return 'string';\n\n    // Boolean kontrolü\n    const booleanCount = nonNullValues.filter(val => \n      val === true || val === false || \n      val === 'true' || val === 'false' ||\n      val === 'True' || val === 'False'\n    ).length;\n    \n    if (booleanCount === nonNullValues.length) return 'boolean';\n\n    // Yüzde kontrolü\n    const percentageCount = nonNullValues.filter(val => \n      typeof val === 'string' && val.includes('%')\n    ).length;\n    \n    if (percentageCount > 0) return 'percentage';\n\n    // Sayı kontrolü\n    const numericCount = nonNullValues.filter(val => {\n      if (typeof val === 'number') return !isNaN(val);\n      if (typeof val === 'string') {\n        const cleaned = val.replace(/,/g, '').replace(/%/g, '').replace(/\\s/g, '').trim();\n        return !isNaN(parseFloat(cleaned)) && cleaned !== '';\n      }\n      return false;\n    }).length;\n\n    if (numericCount === nonNullValues.length) return 'number';\n\n    // Tarih kontrolü (basit)\n    const dateCount = nonNullValues.filter(val => {\n      if (typeof val === 'string') {\n        // Basit tarih formatları kontrolü\n        const datePatterns = [\n          /^\\d{4}-\\d{2}-\\d{2}$/, // YYYY-MM-DD\n          /^\\d{2}\\/\\d{2}\\/\\d{4}$/, // MM/DD/YYYY\n          /^\\d{2}-\\d{2}-\\d{4}$/, // MM-DD-YYYY\n        ];\n        return datePatterns.some(pattern => pattern.test(val));\n      }\n      return false;\n    }).length;\n\n    if (dateCount > nonNullValues.length * 0.8) return 'date';\n\n    return 'string';\n  }\n\n  /**\n   * Veriyi dinamik olarak işle\n   */\n  static processDataDynamically(data: any[], columnInfo: ColumnInfo[], nullHandling: 'zero' | 'null' | 'exclude' = 'zero'): any[] {\n    return data.map(row => {\n      const processedRow: any = {};\n\n      columnInfo.forEach(column => {\n        const value = row[column.name];\n        \n        switch (column.type) {\n          case 'number':\n            processedRow[column.name] = this.convertToNumber(value);\n            break;\n          case 'percentage':\n            processedRow[column.name] = this.convertPercentageToNumber(value);\n            break;\n          case 'boolean':\n            processedRow[column.name] = this.convertToBoolean(value);\n            break;\n          case 'date':\n            processedRow[column.name] = this.convertToDate(value);\n            break;\n          default:\n            processedRow[column.name] = value;\n        }\n\n        // Null değerleri işle\n        if (processedRow[column.name] === null || processedRow[column.name] === undefined) {\n          switch (nullHandling) {\n            case 'zero':\n              processedRow[column.name] = column.type === 'string' ? '' : 0;\n              break;\n            case 'null':\n              processedRow[column.name] = null;\n              break;\n            case 'exclude':\n              // Bu satırı filtreleme sırasında çıkaracağız\n              break;\n          }\n        }\n      });\n\n      return processedRow;\n    });\n  }\n\n  /**\n   * Yüzde değerini sayıya çevir\n   */\n  private static convertPercentageToNumber(value: any): number {\n    if (value === null || value === undefined || value === '') {\n      return 0;\n    }\n\n    try {\n      if (typeof value === 'number') {\n        return isNaN(value) ? 0 : value;\n      }\n\n      if (typeof value === 'string') {\n        const cleaned = value.replace(/,/g, '').replace(/\\s/g, '').trim();\n        if (cleaned === '' || cleaned === '-') {\n          return 0;\n        }\n        \n        // Yüzde işaretini kaldır ve parse et\n        const withoutPercent = cleaned.replace(/%/g, '');\n        const parsed = parseFloat(withoutPercent);\n        return isNaN(parsed) ? 0 : parsed;\n      }\n\n      return 0;\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * Boolean değere çevir\n   */\n  private static convertToBoolean(value: any): boolean | null {\n    if (value === null || value === undefined || value === '') {\n      return null;\n    }\n\n    if (typeof value === 'boolean') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      const lower = value.toLowerCase().trim();\n      if (lower === 'true' || lower === '1' || lower === 'yes') {\n        return true;\n      }\n      if (lower === 'false' || lower === '0' || lower === 'no') {\n        return false;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value === 1;\n    }\n\n    return null;\n  }\n\n  /**\n   * Tarih değerine çevir\n   */\n  private static convertToDate(value: any): string | null {\n    if (value === null || value === undefined || value === '') {\n      return null;\n    }\n\n    if (typeof value === 'string') {\n      // Basit tarih formatı kontrolü\n      const datePatterns = [\n        /^\\d{4}-\\d{2}-\\d{2}$/, // YYYY-MM-DD\n        /^\\d{2}\\/\\d{2}\\/\\d{4}$/, // MM/DD/YYYY\n        /^\\d{2}-\\d{2}-\\d{4}$/, // MM-DD-YYYY\n      ];\n      \n      if (datePatterns.some(pattern => pattern.test(value))) {\n        return value;\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Tek klasördeki tüm CSV dosyalarını birleştirir\n   */\n  static async mergeNoDuplicateData(files: File[]): Promise<{ data: KeywordData[], columnInfo: ColumnInfo[] }> {\n    const allData: KeywordData[] = [];\n    let allColumnInfo: ColumnInfo[] = [];\n    \n    for (const file of files) {\n      try {\n        const rawData = await this.parseCsvFile(file);\n        \n        // İlk dosyadan sütun bilgilerini al\n        if (allColumnInfo.length === 0) {\n          allColumnInfo = this.analyzeColumns(rawData);\n        }\n        \n        // Veriyi dinamik olarak işle\n        const processedData = this.processDataDynamically(rawData, allColumnInfo);\n        \n        // Kategori bilgisini ekle\n        const dataWithCategory = processedData.map(row => ({\n          ...row,\n          Category: this.extractCategoryFromFileName(file.name),\n        }));\n        \n        allData.push(...dataWithCategory);\n      } catch (error) {\n        console.error(`Error processing file ${file.name}:`, error);\n      }\n    }\n    \n    return {\n      data: allData.sort((a, b) => (b.Difficulty || 0) - (a.Difficulty || 0)),\n      columnInfo: allColumnInfo\n    };\n  }\n  \n  /**\n   * Tarih modu için çoklu klasör işleme\n   */\n  static async mergeWithDateData(folders: File[][]): Promise<{ data: KeywordData[], columnInfo: ColumnInfo[] }> {\n    const allData: KeywordData[] = [];\n    let allColumnInfo: ColumnInfo[] = [];\n    \n    for (const folder of folders) {\n      const folderName = folder[0]?.webkitRelativePath?.split('/')[0] || 'unknown';\n      const dateInfo = folderName.split('_')[0];\n      \n      for (const file of folder) {\n        try {\n          const rawData = await this.parseCsvFile(file);\n          \n          // İlk dosyadan sütun bilgilerini al\n          if (allColumnInfo.length === 0) {\n            allColumnInfo = this.analyzeColumns(rawData);\n          }\n          \n          // Veriyi dinamik olarak işle\n          const processedData = this.processDataDynamically(rawData, allColumnInfo);\n          \n          const dataWithCategory = processedData.map(row => ({\n            ...row,\n            Category: this.extractCategoryFromFileName(file.name),\n            Date: dateInfo,\n          }));\n          \n          allData.push(...dataWithCategory);\n        } catch (error) {\n          console.error(`Error processing file ${file.name}:`, error);\n        }\n      }\n    }\n    \n    return {\n      data: allData.sort((a, b) => (b.Difficulty || 0) - (a.Difficulty || 0)),\n      columnInfo: allColumnInfo\n    };\n  }\n  \n  /**\n   * Tek CSV dosyası işleme\n   */\n  static async processSingleCsvFile(file: File): Promise<{ data: KeywordData[], columnInfo: ColumnInfo[] }> {\n    try {\n      const rawData = await this.parseCsvFile(file);\n      const columnInfo = this.analyzeColumns(rawData);\n      const processedData = this.processDataDynamically(rawData, columnInfo);\n      \n      const dataWithCategory = processedData.map(row => ({\n        ...row,\n        Category: this.extractCategoryFromFileName(file.name),\n      }));\n      \n      return {\n        data: dataWithCategory.sort((a, b) => (b.Difficulty || 0) - (a.Difficulty || 0)),\n        columnInfo\n      };\n    } catch (error) {\n      console.error(`Error processing single file ${file.name}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * KVD (Keyword, Volume, Difficulty) filtresi\n   */\n  static filterKVD(data: KeywordData[], limit: number): KeywordData[] {\n    return data\n      .filter(row => (row.Volume || 0) >= 20 && (row.Difficulty || 0) <= limit)\n      .sort((a, b) => (b.Volume || 0) - (a.Volume || 0));\n  }\n  \n  /**\n   * Kelime frekans analizi\n   */\n  static getWordFrequency(data: KeywordData[]): { word: string; frequency: number; category?: string }[] {\n    const words = data\n      .map(row => row.Keyword)\n      .join(' ')\n      .split(/\\s+/)\n      .filter(word => word.length > 0);\n    \n    const frequencyMap = new Map<string, number>();\n    words.forEach(word => {\n      const normalized = word.toLowerCase();\n      frequencyMap.set(normalized, (frequencyMap.get(normalized) || 0) + 1);\n    });\n    \n    const result = Array.from(frequencyMap.entries())\n      .map(([word, frequency]) => ({\n        word,\n        frequency,\n        category: data[0]?.Category || 'Frequency',\n      }))\n      .sort((a, b) => b.frequency - a.frequency);\n    \n    return result;\n  }\n  \n  /**\n   * Branded kelimeleri filtrele\n   */\n  static filterBrandedWords(frequencyData: { word: string; frequency: number; category?: string }[]): { word: string; frequency: number; category?: string }[] {\n    const stopWords = [\n      'free', 'new', 'best', 'top', 'iphone', 'ipad', 'android', 'google', 'store',\n      'download', 'downloads', 'for', 'apple', 'with', 'yours', 'a', 'about', 'above', 'after', 'again', 'against', 'all',\n      'am', 'an', 'and', 'any', 'app', 'are', 'aren\\'t', 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below',\n      'between', 'both', 'but', 'by', 'can\\'t', 'cannot', 'could', 'couldn\\'t', 'did', 'didn\\'t', 'do', 'does', 'doesn\\'t',\n      'doing', 'don\\'t', 'down', 'during', 'each', 'few', 'from', 'further', 'had', 'hadn\\'t', 'has', 'hasn\\'t', 'have',\n      'haven\\'t', 'having', 'he', 'he\\'d', 'he\\'ll', 'he\\'s', 'her', 'here', 'here\\'s', 'hers', 'herself', 'him', 'himself',\n      'his', 'how', 'how\\'s', 'i', 'i\\'d', 'i\\'ll', 'i\\'m', 'i\\'ve', 'if', 'in', 'into', 'is', 'isn\\'t', 'it', 'it\\'s', 'its',\n      'itself', 'let\\'s', 'me', 'more', 'most', 'mustn\\'t', 'my', 'myself', 'no', 'nor', 'not', 'of', 'off', 'on', 'once',\n      'only', 'or', 'other', 'ought', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'same', 'shan\\'t', 'she', 'she\\'d',\n      'she\\'ll', 'she\\'s', 'should', 'shouldn\\'t', 'so', 'some', 'such', 'than', 'that', 'that\\'s', 'the', 'their', 'theirs',\n      'them', 'themselves', 'then', 'there', 'there\\'s', 'these', 'they', 'they\\'d', 'they\\'ll', 'they\\'re', 'they\\'ve', 'this',\n      'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', 'wasn\\'t', 'we', 'we\\'d', 'we\\'ll', 'we\\'re',\n      'we\\'ve', 'were', 'weren\\'t', 'what', 'what\\'s', 'when', 'when\\'s', 'where', 'where\\'s', 'which', 'while', 'who', 'who\\'s',\n      'whom', 'why', 'why\\'s', 'won\\'t', 'would', 'wouldn\\'t', 'you', 'you\\'d', 'you\\'ll', 'you\\'re', 'you\\'ve', 'your', 'yours',\n      'yourself', 'yourselves'\n    ];\n    \n    return frequencyData.filter(item => {\n      const word = item.word.toLowerCase();\n      return !stopWords.includes(word);\n    });\n  }\n  \n  /**\n   * Çoğul eklerini kaldır\n   */\n  static removeSuffixes(frequencyData: { word: string; frequency: number; category?: string }[]): { word: string; frequency: number; category?: string }[] {\n    return frequencyData.map(item => {\n      let word = item.word.toLowerCase();\n      \n      // Basit çoğul ek kaldırma kuralları\n      if (word.endsWith('ies')) {\n        word = word.slice(0, -3) + 'y';\n      } else if (word.endsWith('es')) {\n        word = word.slice(0, -2);\n      } else if (word.endsWith('s')) {\n        word = word.slice(0, -1);\n      }\n      \n      return {\n        ...item,\n        word,\n      };\n    });\n  }\n  \n  /**\n   * CSV dosyasını parse et\n   */\n  private static async parseCsvFile(file: File): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      Papa.parse(file, {\n        header: true,\n        skipEmptyLines: true,\n        complete: (results) => {\n          if (results.errors.length > 0) {\n            reject(new Error(`CSV parsing errors: ${results.errors.map(e => e.message).join(', ')}`));\n          } else {\n            resolve(results.data);\n          }\n        },\n        error: (error) => {\n          reject(error);\n        },\n      });\n    });\n  }\n  \n  /**\n   * Herhangi bir değeri güvenli şekilde number'a çevir\n   */\n  private static convertToNumber(value: any): number {\n    if (value === null || value === undefined || value === '') {\n      return 0;\n    }\n    \n    try {\n      // String ise temizle\n      if (typeof value === 'string') {\n        const cleaned = value.replace(/,/g, '').replace(/%/g, '').replace(/\\s/g, '').trim();\n        if (cleaned === '' || cleaned === '-') {\n          return 0;\n        }\n        const parsed = parseFloat(cleaned);\n        return isNaN(parsed) ? 0 : parsed;\n      }\n      \n      // Number ise direkt döndür\n      if (typeof value === 'number') {\n        return isNaN(value) ? 0 : value;\n      }\n      \n      // Diğer tipler için string'e çevir ve parse et\n      const stringValue = String(value);\n      const cleaned = stringValue.replace(/,/g, '').replace(/%/g, '').replace(/\\s/g, '').trim();\n      const parsed = parseFloat(cleaned);\n      return isNaN(parsed) ? 0 : parsed;\n    } catch {\n      return 0;\n    }\n  }\n  \n  /**\n   * Growth değerini integer'a çevir (geriye uyumluluk için)\n   */\n  private static convertGrowthToInt(growth: any): number {\n    return this.convertToNumber(growth);\n  }\n  \n  /**\n   * Dosya adından kategori çıkar\n   */\n  private static extractCategoryFromFileName(fileName: string): string {\n    const nameWithoutExt = fileName.replace('.csv', '');\n    const parts = nameWithoutExt.split('-');\n    \n    if (parts.length >= 4 && parts[0] === 'trending' && parts[1] === 'keywords') {\n      return parts.slice(3).join('-');\n    } else {\n      return parts[parts.length - 1] || nameWithoutExt;\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}