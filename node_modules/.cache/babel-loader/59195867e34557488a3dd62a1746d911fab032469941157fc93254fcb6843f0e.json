{"ast":null,"code":"import Papa from 'papaparse';\nexport class CsvProcessor {\n  /**\n   * Tek klasördeki tüm CSV dosyalarını birleştirir\n   */\n  static async mergeNoDuplicateData(files) {\n    const allData = [];\n    for (const file of files) {\n      try {\n        const data = await this.parseCsvFile(file);\n\n        // Growth sütununu integer'a çevir\n        const processedData = data.map(row => ({\n          ...row,\n          'Growth (Max Reach)': this.convertGrowthToInt(row['Growth (Max Reach)']),\n          Category: this.extractCategoryFromFileName(file.name)\n        }));\n        allData.push(...processedData);\n      } catch (error) {\n        console.error(`Error processing file ${file.name}:`, error);\n      }\n    }\n\n    // Difficulty'ye göre azalan sıralama\n    return allData.sort((a, b) => b.Difficulty - a.Difficulty);\n  }\n\n  /**\n   * Tarih modu için çoklu klasör işleme\n   */\n  static async mergeWithDateData(folders) {\n    const allData = [];\n    for (const folder of folders) {\n      var _folder$, _folder$$webkitRelati;\n      const folderName = ((_folder$ = folder[0]) === null || _folder$ === void 0 ? void 0 : (_folder$$webkitRelati = _folder$.webkitRelativePath) === null || _folder$$webkitRelati === void 0 ? void 0 : _folder$$webkitRelati.split('/')[0]) || 'unknown';\n      const dateInfo = folderName.split('_')[0];\n      for (const file of folder) {\n        try {\n          const data = await this.parseCsvFile(file);\n          const processedData = data.map(row => ({\n            ...row,\n            'Growth (Max Reach)': this.convertGrowthToInt(row['Growth (Max Reach)']),\n            Category: this.extractCategoryFromFileName(file.name),\n            Date: dateInfo\n          }));\n          allData.push(...processedData);\n        } catch (error) {\n          console.error(`Error processing file ${file.name}:`, error);\n        }\n      }\n    }\n\n    // Difficulty'ye göre azalan sıralama\n    return allData.sort((a, b) => b.Difficulty - a.Difficulty);\n  }\n\n  /**\n   * Tek CSV dosyası işleme\n   */\n  static async processSingleCsvFile(file) {\n    try {\n      const data = await this.parseCsvFile(file);\n      const processedData = data.map(row => ({\n        ...row,\n        'Growth (Max Reach)': this.convertGrowthToInt(row['Growth (Max Reach)']),\n        Category: this.extractCategoryFromFileName(file.name)\n      }));\n\n      // Difficulty'ye göre azalan sıralama\n      return processedData.sort((a, b) => b.Difficulty - a.Difficulty);\n    } catch (error) {\n      console.error(`Error processing single file ${file.name}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * KVD (Keyword, Volume, Difficulty) filtresi\n   */\n  static filterKVD(data, limit) {\n    return data.filter(row => row.Volume >= 20 && row.Difficulty <= limit).sort((a, b) => b.Volume - a.Volume);\n  }\n\n  /**\n   * Kelime frekans analizi\n   */\n  static getWordFrequency(data) {\n    const words = data.map(row => row.Keyword).join(' ').split(/\\s+/).filter(word => word.length > 0);\n    const frequencyMap = new Map();\n    words.forEach(word => {\n      const normalized = word.toLowerCase();\n      frequencyMap.set(normalized, (frequencyMap.get(normalized) || 0) + 1);\n    });\n    const result = Array.from(frequencyMap.entries()).map(([word, frequency]) => {\n      var _data$;\n      return {\n        word,\n        frequency,\n        category: ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.Category) || 'Frequency'\n      };\n    }).sort((a, b) => b.frequency - a.frequency);\n    return result;\n  }\n\n  /**\n   * Branded kelimeleri filtrele\n   */\n  static filterBrandedWords(frequencyData) {\n    const stopWords = ['free', 'new', 'best', 'top', 'iphone', 'ipad', 'android', 'google', 'store', 'download', 'downloads', 'for', 'apple', 'with', 'yours', 'a', 'about', 'above', 'after', 'again', 'against', 'all', 'am', 'an', 'and', 'any', 'app', 'are', 'aren\\'t', 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', 'can\\'t', 'cannot', 'could', 'couldn\\'t', 'did', 'didn\\'t', 'do', 'does', 'doesn\\'t', 'doing', 'don\\'t', 'down', 'during', 'each', 'few', 'from', 'further', 'had', 'hadn\\'t', 'has', 'hasn\\'t', 'have', 'haven\\'t', 'having', 'he', 'he\\'d', 'he\\'ll', 'he\\'s', 'her', 'here', 'here\\'s', 'hers', 'herself', 'him', 'himself', 'his', 'how', 'how\\'s', 'i', 'i\\'d', 'i\\'ll', 'i\\'m', 'i\\'ve', 'if', 'in', 'into', 'is', 'isn\\'t', 'it', 'it\\'s', 'its', 'itself', 'let\\'s', 'me', 'more', 'most', 'mustn\\'t', 'my', 'myself', 'no', 'nor', 'not', 'of', 'off', 'on', 'once', 'only', 'or', 'other', 'ought', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'same', 'shan\\'t', 'she', 'she\\'d', 'she\\'ll', 'she\\'s', 'should', 'shouldn\\'t', 'so', 'some', 'such', 'than', 'that', 'that\\'s', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', 'there\\'s', 'these', 'they', 'they\\'d', 'they\\'ll', 'they\\'re', 'they\\'ve', 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', 'wasn\\'t', 'we', 'we\\'d', 'we\\'ll', 'we\\'re', 'we\\'ve', 'were', 'weren\\'t', 'what', 'what\\'s', 'when', 'when\\'s', 'where', 'where\\'s', 'which', 'while', 'who', 'who\\'s', 'whom', 'why', 'why\\'s', 'won\\'t', 'would', 'wouldn\\'t', 'you', 'you\\'d', 'you\\'ll', 'you\\'re', 'you\\'ve', 'your', 'yours', 'yourself', 'yourselves'];\n    return frequencyData.filter(item => {\n      const word = item.word.toLowerCase();\n      return !stopWords.includes(word);\n    });\n  }\n\n  /**\n   * Çoğul eklerini kaldır\n   */\n  static removeSuffixes(frequencyData) {\n    return frequencyData.map(item => {\n      let word = item.word.toLowerCase();\n\n      // Basit çoğul ek kaldırma kuralları\n      if (word.endsWith('ies')) {\n        word = word.slice(0, -3) + 'y';\n      } else if (word.endsWith('es')) {\n        word = word.slice(0, -2);\n      } else if (word.endsWith('s')) {\n        word = word.slice(0, -1);\n      }\n      return {\n        ...item,\n        word\n      };\n    });\n  }\n\n  /**\n   * CSV dosyasını parse et\n   */\n  static async parseCsvFile(file) {\n    return new Promise((resolve, reject) => {\n      Papa.parse(file, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => {\n          if (results.errors.length > 0) {\n            reject(new Error(`CSV parsing errors: ${results.errors.map(e => e.message).join(', ')}`));\n          } else {\n            resolve(results.data);\n          }\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  /**\n   * Growth değerini integer'a çevir\n   */\n  static convertGrowthToInt(growth) {\n    if (!growth || growth === '') {\n      return 0;\n    }\n    try {\n      const cleaned = String(growth).replace(/,/g, '').replace(/%/g, '').trim();\n      return parseInt(cleaned, 10);\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * Dosya adından kategori çıkar\n   */\n  static extractCategoryFromFileName(fileName) {\n    const nameWithoutExt = fileName.replace('.csv', '');\n    const parts = nameWithoutExt.split('-');\n    if (parts.length >= 4 && parts[0] === 'trending' && parts[1] === 'keywords') {\n      return parts.slice(3).join('-');\n    } else {\n      return parts[parts.length - 1] || nameWithoutExt;\n    }\n  }\n}","map":{"version":3,"names":["Papa","CsvProcessor","mergeNoDuplicateData","files","allData","file","data","parseCsvFile","processedData","map","row","convertGrowthToInt","Category","extractCategoryFromFileName","name","push","error","console","sort","a","b","Difficulty","mergeWithDateData","folders","folder","_folder$","_folder$$webkitRelati","folderName","webkitRelativePath","split","dateInfo","Date","processSingleCsvFile","filterKVD","limit","filter","Volume","getWordFrequency","words","Keyword","join","word","length","frequencyMap","Map","forEach","normalized","toLowerCase","set","get","result","Array","from","entries","frequency","_data$","category","filterBrandedWords","frequencyData","stopWords","item","includes","removeSuffixes","endsWith","slice","Promise","resolve","reject","parse","header","skipEmptyLines","complete","results","errors","Error","e","message","growth","cleaned","String","replace","trim","parseInt","fileName","nameWithoutExt","parts"],"sources":["/Users/aibatyr/Documents/GitHub/KeyWords_Analyzer_Mac/src/utils/csvProcessor.ts"],"sourcesContent":["import Papa from 'papaparse';\nimport { KeywordData } from '../types';\n\nexport class CsvProcessor {\n  /**\n   * Tek klasördeki tüm CSV dosyalarını birleştirir\n   */\n  static async mergeNoDuplicateData(files: File[]): Promise<KeywordData[]> {\n    const allData: KeywordData[] = [];\n    \n    for (const file of files) {\n      try {\n        const data = await this.parseCsvFile(file);\n        \n        // Growth sütununu integer'a çevir\n        const processedData = data.map(row => ({\n          ...row,\n          'Growth (Max Reach)': this.convertGrowthToInt(row['Growth (Max Reach)']),\n          Category: this.extractCategoryFromFileName(file.name),\n        }));\n        \n        allData.push(...processedData);\n      } catch (error) {\n        console.error(`Error processing file ${file.name}:`, error);\n      }\n    }\n    \n    // Difficulty'ye göre azalan sıralama\n    return allData.sort((a, b) => b.Difficulty - a.Difficulty);\n  }\n  \n  /**\n   * Tarih modu için çoklu klasör işleme\n   */\n  static async mergeWithDateData(folders: File[][]): Promise<KeywordData[]> {\n    const allData: KeywordData[] = [];\n    \n    for (const folder of folders) {\n      const folderName = folder[0]?.webkitRelativePath?.split('/')[0] || 'unknown';\n      const dateInfo = folderName.split('_')[0];\n      \n      for (const file of folder) {\n        try {\n          const data = await this.parseCsvFile(file);\n          \n          const processedData = data.map(row => ({\n            ...row,\n            'Growth (Max Reach)': this.convertGrowthToInt(row['Growth (Max Reach)']),\n            Category: this.extractCategoryFromFileName(file.name),\n            Date: dateInfo,\n          }));\n          \n          allData.push(...processedData);\n        } catch (error) {\n          console.error(`Error processing file ${file.name}:`, error);\n        }\n      }\n    }\n    \n    // Difficulty'ye göre azalan sıralama\n    return allData.sort((a, b) => b.Difficulty - a.Difficulty);\n  }\n  \n  /**\n   * Tek CSV dosyası işleme\n   */\n  static async processSingleCsvFile(file: File): Promise<KeywordData[]> {\n    try {\n      const data = await this.parseCsvFile(file);\n      \n      const processedData = data.map(row => ({\n        ...row,\n        'Growth (Max Reach)': this.convertGrowthToInt(row['Growth (Max Reach)']),\n        Category: this.extractCategoryFromFileName(file.name),\n      }));\n      \n      // Difficulty'ye göre azalan sıralama\n      return processedData.sort((a, b) => b.Difficulty - a.Difficulty);\n    } catch (error) {\n      console.error(`Error processing single file ${file.name}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * KVD (Keyword, Volume, Difficulty) filtresi\n   */\n  static filterKVD(data: KeywordData[], limit: number): KeywordData[] {\n    return data\n      .filter(row => row.Volume >= 20 && row.Difficulty <= limit)\n      .sort((a, b) => b.Volume - a.Volume);\n  }\n  \n  /**\n   * Kelime frekans analizi\n   */\n  static getWordFrequency(data: KeywordData[]): { word: string; frequency: number; category?: string }[] {\n    const words = data\n      .map(row => row.Keyword)\n      .join(' ')\n      .split(/\\s+/)\n      .filter(word => word.length > 0);\n    \n    const frequencyMap = new Map<string, number>();\n    words.forEach(word => {\n      const normalized = word.toLowerCase();\n      frequencyMap.set(normalized, (frequencyMap.get(normalized) || 0) + 1);\n    });\n    \n    const result = Array.from(frequencyMap.entries())\n      .map(([word, frequency]) => ({\n        word,\n        frequency,\n        category: data[0]?.Category || 'Frequency',\n      }))\n      .sort((a, b) => b.frequency - a.frequency);\n    \n    return result;\n  }\n  \n  /**\n   * Branded kelimeleri filtrele\n   */\n  static filterBrandedWords(frequencyData: { word: string; frequency: number; category?: string }[]): { word: string; frequency: number; category?: string }[] {\n    const stopWords = [\n      'free', 'new', 'best', 'top', 'iphone', 'ipad', 'android', 'google', 'store',\n      'download', 'downloads', 'for', 'apple', 'with', 'yours', 'a', 'about', 'above', 'after', 'again', 'against', 'all',\n      'am', 'an', 'and', 'any', 'app', 'are', 'aren\\'t', 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below',\n      'between', 'both', 'but', 'by', 'can\\'t', 'cannot', 'could', 'couldn\\'t', 'did', 'didn\\'t', 'do', 'does', 'doesn\\'t',\n      'doing', 'don\\'t', 'down', 'during', 'each', 'few', 'from', 'further', 'had', 'hadn\\'t', 'has', 'hasn\\'t', 'have',\n      'haven\\'t', 'having', 'he', 'he\\'d', 'he\\'ll', 'he\\'s', 'her', 'here', 'here\\'s', 'hers', 'herself', 'him', 'himself',\n      'his', 'how', 'how\\'s', 'i', 'i\\'d', 'i\\'ll', 'i\\'m', 'i\\'ve', 'if', 'in', 'into', 'is', 'isn\\'t', 'it', 'it\\'s', 'its',\n      'itself', 'let\\'s', 'me', 'more', 'most', 'mustn\\'t', 'my', 'myself', 'no', 'nor', 'not', 'of', 'off', 'on', 'once',\n      'only', 'or', 'other', 'ought', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'same', 'shan\\'t', 'she', 'she\\'d',\n      'she\\'ll', 'she\\'s', 'should', 'shouldn\\'t', 'so', 'some', 'such', 'than', 'that', 'that\\'s', 'the', 'their', 'theirs',\n      'them', 'themselves', 'then', 'there', 'there\\'s', 'these', 'they', 'they\\'d', 'they\\'ll', 'they\\'re', 'they\\'ve', 'this',\n      'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', 'wasn\\'t', 'we', 'we\\'d', 'we\\'ll', 'we\\'re',\n      'we\\'ve', 'were', 'weren\\'t', 'what', 'what\\'s', 'when', 'when\\'s', 'where', 'where\\'s', 'which', 'while', 'who', 'who\\'s',\n      'whom', 'why', 'why\\'s', 'won\\'t', 'would', 'wouldn\\'t', 'you', 'you\\'d', 'you\\'ll', 'you\\'re', 'you\\'ve', 'your', 'yours',\n      'yourself', 'yourselves'\n    ];\n    \n    return frequencyData.filter(item => {\n      const word = item.word.toLowerCase();\n      return !stopWords.includes(word);\n    });\n  }\n  \n  /**\n   * Çoğul eklerini kaldır\n   */\n  static removeSuffixes(frequencyData: { word: string; frequency: number; category?: string }[]): { word: string; frequency: number; category?: string }[] {\n    return frequencyData.map(item => {\n      let word = item.word.toLowerCase();\n      \n      // Basit çoğul ek kaldırma kuralları\n      if (word.endsWith('ies')) {\n        word = word.slice(0, -3) + 'y';\n      } else if (word.endsWith('es')) {\n        word = word.slice(0, -2);\n      } else if (word.endsWith('s')) {\n        word = word.slice(0, -1);\n      }\n      \n      return {\n        ...item,\n        word,\n      };\n    });\n  }\n  \n  /**\n   * CSV dosyasını parse et\n   */\n  private static async parseCsvFile(file: File): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      Papa.parse(file, {\n        header: true,\n        skipEmptyLines: true,\n        complete: (results) => {\n          if (results.errors.length > 0) {\n            reject(new Error(`CSV parsing errors: ${results.errors.map(e => e.message).join(', ')}`));\n          } else {\n            resolve(results.data);\n          }\n        },\n        error: (error) => {\n          reject(error);\n        },\n      });\n    });\n  }\n  \n  /**\n   * Growth değerini integer'a çevir\n   */\n  private static convertGrowthToInt(growth: any): number {\n    if (!growth || growth === '') {\n      return 0;\n    }\n    \n    try {\n      const cleaned = String(growth).replace(/,/g, '').replace(/%/g, '').trim();\n      return parseInt(cleaned, 10);\n    } catch {\n      return 0;\n    }\n  }\n  \n  /**\n   * Dosya adından kategori çıkar\n   */\n  private static extractCategoryFromFileName(fileName: string): string {\n    const nameWithoutExt = fileName.replace('.csv', '');\n    const parts = nameWithoutExt.split('-');\n    \n    if (parts.length >= 4 && parts[0] === 'trending' && parts[1] === 'keywords') {\n      return parts.slice(3).join('-');\n    } else {\n      return parts[parts.length - 1] || nameWithoutExt;\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}