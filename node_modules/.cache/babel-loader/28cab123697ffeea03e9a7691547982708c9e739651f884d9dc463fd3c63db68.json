{"ast":null,"code":"import { create } from 'zustand';\nconst initialFilters = {\n  columnFilters: {},\n  searchTerms: [],\n  excludeTerms: [],\n  filterNonLatin: false\n};\nexport const useAppStore = create((set, get) => ({\n  // Initial state\n  mergedData: null,\n  currentTable: null,\n  loading: false,\n  error: null,\n  success: null,\n  dateMode: false,\n  fileMode: false,\n  selectedCountry: 'United States',\n  appName: '',\n  filters: initialFilters,\n  sortColumn: null,\n  sortDirection: 'asc',\n  // Actions\n  setLoading: loading => set({\n    loading\n  }),\n  setError: error => set({\n    error\n  }),\n  setSuccess: success => set({\n    success\n  }),\n  setMergedData: data => set({\n    mergedData: data\n  }),\n  setCurrentTable: data => set({\n    currentTable: data\n  }),\n  setDateMode: mode => {\n    set(state => ({\n      dateMode: mode,\n      fileMode: mode ? false : state.fileMode\n    }));\n  },\n  setFileMode: mode => {\n    set(state => ({\n      fileMode: mode,\n      dateMode: mode ? false : state.dateMode\n    }));\n  },\n  setSelectedCountry: country => set({\n    selectedCountry: country\n  }),\n  setAppName: name => set({\n    appName: name\n  }),\n  setColumnFilter: (column, min, max) => {\n    set(state => ({\n      filters: {\n        ...state.filters,\n        columnFilters: {\n          ...state.filters.columnFilters,\n          [column]: {\n            min,\n            max\n          }\n        }\n      }\n    }));\n  },\n  addSearchTerm: term => {\n    set(state => {\n      const normalizedTerm = term.toLowerCase();\n      const exists = state.filters.searchTerms.some(t => t.toLowerCase() === normalizedTerm);\n      if (!exists) {\n        return {\n          filters: {\n            ...state.filters,\n            searchTerms: [...state.filters.searchTerms, term]\n          }\n        };\n      }\n      return state;\n    });\n  },\n  removeSearchTerm: term => {\n    set(state => ({\n      filters: {\n        ...state.filters,\n        searchTerms: state.filters.searchTerms.filter(t => t !== term)\n      }\n    }));\n  },\n  addExcludeTerm: term => {\n    set(state => {\n      const normalizedTerm = term.toLowerCase();\n      const exists = state.filters.excludeTerms.some(t => t.toLowerCase() === normalizedTerm);\n      if (!exists) {\n        return {\n          filters: {\n            ...state.filters,\n            excludeTerms: [...state.filters.excludeTerms, term]\n          }\n        };\n      }\n      return state;\n    });\n  },\n  removeExcludeTerm: term => {\n    set(state => ({\n      filters: {\n        ...state.filters,\n        excludeTerms: state.filters.excludeTerms.filter(t => t !== term)\n      }\n    }));\n  },\n  setFilterNonLatin: filter => {\n    set(state => ({\n      filters: {\n        ...state.filters,\n        filterNonLatin: filter\n      }\n    }));\n  },\n  clearFilters: () => {\n    set(state => ({\n      filters: initialFilters\n    }));\n  },\n  setSortColumn: column => set({\n    sortColumn: column\n  }),\n  setSortDirection: direction => set({\n    sortDirection: direction\n  }),\n  clearMessages: () => set({\n    error: null,\n    success: null\n  })\n}));","map":{"version":3,"names":["create","initialFilters","columnFilters","searchTerms","excludeTerms","filterNonLatin","useAppStore","set","get","mergedData","currentTable","loading","error","success","dateMode","fileMode","selectedCountry","appName","filters","sortColumn","sortDirection","setLoading","setError","setSuccess","setMergedData","data","setCurrentTable","setDateMode","mode","state","setFileMode","setSelectedCountry","country","setAppName","name","setColumnFilter","column","min","max","addSearchTerm","term","normalizedTerm","toLowerCase","exists","some","t","removeSearchTerm","filter","addExcludeTerm","removeExcludeTerm","setFilterNonLatin","clearFilters","setSortColumn","setSortDirection","direction","clearMessages"],"sources":["/Users/aibatyr/Documents/GitHub/KeyWords_Analyzer_Mac/src/store/index.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { AppState, FilterState, KeywordData } from '../types';\n\ninterface AppStore extends AppState {\n  // Actions\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setSuccess: (success: string | null) => void;\n  \n  // Data actions\n  setMergedData: (data: KeywordData[] | null) => void;\n  setCurrentTable: (data: KeywordData[] | null) => void;\n  \n  // Settings actions\n  setDateMode: (mode: boolean) => void;\n  setFileMode: (mode: boolean) => void;\n  setSelectedCountry: (country: string) => void;\n  setAppName: (name: string) => void;\n  \n  // Filter actions\n  setColumnFilter: (column: string, min: number, max: number) => void;\n  addSearchTerm: (term: string) => void;\n  removeSearchTerm: (term: string) => void;\n  addExcludeTerm: (term: string) => void;\n  removeExcludeTerm: (term: string) => void;\n  setFilterNonLatin: (filter: boolean) => void;\n  clearFilters: () => void;\n  \n  // Table actions\n  setSortColumn: (column: string | null) => void;\n  setSortDirection: (direction: 'asc' | 'desc') => void;\n  \n  // Utility actions\n  clearMessages: () => void;\n}\n\nconst initialFilters: FilterState = {\n  columnFilters: {},\n  searchTerms: [],\n  excludeTerms: [],\n  filterNonLatin: false,\n};\n\nexport const useAppStore = create<AppStore>((set, get) => ({\n  // Initial state\n  mergedData: null,\n  currentTable: null,\n  loading: false,\n  error: null,\n  success: null,\n  dateMode: false,\n  fileMode: false,\n  selectedCountry: 'United States',\n  appName: '',\n  filters: initialFilters,\n  sortColumn: null,\n  sortDirection: 'asc',\n  \n  // Actions\n  setLoading: (loading) => set({ loading }),\n  setError: (error) => set({ error }),\n  setSuccess: (success) => set({ success }),\n  \n  setMergedData: (data) => set({ mergedData: data }),\n  setCurrentTable: (data) => set({ currentTable: data }),\n  \n  setDateMode: (mode) => {\n    set((state) => ({\n      dateMode: mode,\n      fileMode: mode ? false : state.fileMode,\n    }));\n  },\n  \n  setFileMode: (mode) => {\n    set((state) => ({\n      fileMode: mode,\n      dateMode: mode ? false : state.dateMode,\n    }));\n  },\n  \n  setSelectedCountry: (country) => set({ selectedCountry: country }),\n  setAppName: (name) => set({ appName: name }),\n  \n  setColumnFilter: (column, min, max) => {\n    set((state) => ({\n      filters: {\n        ...state.filters,\n        columnFilters: {\n          ...state.filters.columnFilters,\n          [column]: { min, max },\n        },\n      },\n    }));\n  },\n  \n  addSearchTerm: (term) => {\n    set((state) => {\n      const normalizedTerm = term.toLowerCase();\n      const exists = state.filters.searchTerms.some(\n        (t) => t.toLowerCase() === normalizedTerm\n      );\n      \n      if (!exists) {\n        return {\n          filters: {\n            ...state.filters,\n            searchTerms: [...state.filters.searchTerms, term],\n          },\n        };\n      }\n      return state;\n    });\n  },\n  \n  removeSearchTerm: (term) => {\n    set((state) => ({\n      filters: {\n        ...state.filters,\n        searchTerms: state.filters.searchTerms.filter((t) => t !== term),\n      },\n    }));\n  },\n  \n  addExcludeTerm: (term) => {\n    set((state) => {\n      const normalizedTerm = term.toLowerCase();\n      const exists = state.filters.excludeTerms.some(\n        (t) => t.toLowerCase() === normalizedTerm\n      );\n      \n      if (!exists) {\n        return {\n          filters: {\n            ...state.filters,\n            excludeTerms: [...state.filters.excludeTerms, term],\n          },\n        };\n      }\n      return state;\n    });\n  },\n  \n  removeExcludeTerm: (term) => {\n    set((state) => ({\n      filters: {\n        ...state.filters,\n        excludeTerms: state.filters.excludeTerms.filter((t) => t !== term),\n      },\n    }));\n  },\n  \n  setFilterNonLatin: (filter) => {\n    set((state) => ({\n      filters: {\n        ...state.filters,\n        filterNonLatin: filter,\n      },\n    }));\n  },\n  \n  clearFilters: () => {\n    set((state) => ({\n      filters: initialFilters,\n    }));\n  },\n  \n  setSortColumn: (column) => set({ sortColumn: column }),\n  setSortDirection: (direction) => set({ sortDirection: direction }),\n  \n  clearMessages: () => set({ error: null, success: null }),\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}