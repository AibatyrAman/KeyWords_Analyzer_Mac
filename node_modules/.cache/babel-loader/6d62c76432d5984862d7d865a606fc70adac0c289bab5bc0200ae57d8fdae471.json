{"ast":null,"code":"import * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nexport class ExportUtils {\n  /**\n   * Excel dosyası oluştur ve indir\n   */\n  static exportToExcel(data, filename, sheetName = 'ASO Data') {\n    try {\n      // Worksheet oluştur\n      const ws = XLSX.utils.json_to_sheet(data);\n\n      // Workbook oluştur\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, sheetName);\n\n      // Excel dosyasını buffer olarak oluştur\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const blob = new Blob([excelBuffer], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n\n      // Dosyayı indir\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n      const fullFilename = `${filename}_${timestamp}.xlsx`;\n      saveAs(blob, fullFilename);\n    } catch (error) {\n      console.error('Excel export error:', error);\n      throw new Error('Excel dosyası oluşturulamadı');\n    }\n  }\n\n  /**\n   * CSV dosyası oluştur ve indir\n   */\n  static exportToCsv(data, filename) {\n    try {\n      if (data.length === 0) {\n        throw new Error('Dışa aktarılacak veri yok');\n      }\n\n      // CSV başlıklarını oluştur\n      const headers = Object.keys(data[0]);\n      const csvContent = [headers.join(','), ...data.map(row => headers.map(header => {\n        const value = row[header];\n        // Virgül içeren değerleri tırnak içine al\n        const stringValue = String(value || '');\n        if (stringValue.includes(',')) {\n          return `\"${stringValue}\"`;\n        }\n        return stringValue;\n      }).join(','))].join('\\n');\n\n      // Blob oluştur\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n\n      // Dosyayı indir\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n      const fullFilename = `${filename}_${timestamp}.csv`;\n      saveAs(blob, fullFilename);\n    } catch (error) {\n      console.error('CSV export error:', error);\n      throw new Error('CSV dosyası oluşturulamadı');\n    }\n  }\n\n  /**\n   * Dosya adını güvenli hale getir\n   */\n  static sanitizeFilename(filename) {\n    return filename.replace(/[<>:\"/\\\\|?*]/g, '_').replace(/\\s+/g, '_').toLowerCase();\n  }\n\n  /**\n   * Timestamp oluştur\n   */\n  static generateTimestamp() {\n    return new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n  }\n}","map":{"version":3,"names":["XLSX","saveAs","ExportUtils","exportToExcel","data","filename","sheetName","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","excelBuffer","write","bookType","type","blob","Blob","timestamp","Date","toISOString","replace","slice","fullFilename","error","console","Error","exportToCsv","length","headers","Object","keys","csvContent","join","map","row","header","value","stringValue","String","includes","sanitizeFilename","toLowerCase","generateTimestamp"],"sources":["/Users/aibatyr/Documents/GitHub/KeyWords_Analyzer_Mac/src/utils/exportUtils.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport { KeywordData, TitleSubtitleData } from '../types';\n\nexport class ExportUtils {\n  /**\n   * Excel dosyası oluştur ve indir\n   */\n  static exportToExcel(\n    data: KeywordData[] | TitleSubtitleData[],\n    filename: string,\n    sheetName: string = 'ASO Data'\n  ): void {\n    try {\n      // Worksheet oluştur\n      const ws = XLSX.utils.json_to_sheet(data);\n      \n      // Workbook oluştur\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, sheetName);\n      \n      // Excel dosyasını buffer olarak oluştur\n      const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n      const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n      \n      // Dosyayı indir\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n      const fullFilename = `${filename}_${timestamp}.xlsx`;\n      saveAs(blob, fullFilename);\n      \n    } catch (error) {\n      console.error('Excel export error:', error);\n      throw new Error('Excel dosyası oluşturulamadı');\n    }\n  }\n  \n  /**\n   * CSV dosyası oluştur ve indir\n   */\n  static exportToCsv(\n    data: KeywordData[] | TitleSubtitleData[],\n    filename: string\n  ): void {\n    try {\n      if (data.length === 0) {\n        throw new Error('Dışa aktarılacak veri yok');\n      }\n      \n      // CSV başlıklarını oluştur\n      const headers = Object.keys(data[0]);\n      const csvContent = [\n        headers.join(','),\n        ...data.map(row => \n          headers.map(header => {\n            const value = row[header as keyof typeof row];\n            // Virgül içeren değerleri tırnak içine al\n            const stringValue = String(value || '');\n            if (stringValue.includes(',')) {\n              return `\"${stringValue}\"`;\n            }\n            return stringValue;\n          }).join(',')\n        )\n      ].join('\\n');\n      \n      // Blob oluştur\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      \n      // Dosyayı indir\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n      const fullFilename = `${filename}_${timestamp}.csv`;\n      saveAs(blob, fullFilename);\n      \n    } catch (error) {\n      console.error('CSV export error:', error);\n      throw new Error('CSV dosyası oluşturulamadı');\n    }\n  }\n  \n  /**\n   * Dosya adını güvenli hale getir\n   */\n  static sanitizeFilename(filename: string): string {\n    return filename\n      .replace(/[<>:\"/\\\\|?*]/g, '_')\n      .replace(/\\s+/g, '_')\n      .toLowerCase();\n  }\n  \n  /**\n   * Timestamp oluştur\n   */\n  static generateTimestamp(): string {\n    return new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}